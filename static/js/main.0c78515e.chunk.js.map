{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/coments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getUserPosts","userId","a","fetch","response","json","getAllPosts","getPostDetails","postId","PostsList","selectedUserId","getSelectPostId","selectPostId","useState","posts","setPosts","loadPostsDataByID","gotPosts","loadAllPostsData","gotAllPosts","useEffect","className","map","post","title","id","type","onClick","getPostComments","deletePostComments","commentId","method","addComment","newComment","headers","body","JSON","stringify","NewCommentForm","refreshCommentsData","name","setName","email","setEmail","setBody","handleSubmit","event","preventDefault","onSubmit","value","onChange","target","placeholder","PostDetails","commentsOfPost","setCommentsOfPost","postDetails","setPostDetails","visibleComments","setVisibleComments","loadComentsByPostId","gotComments","loadPostDetails","gotPostDetails","freshComents","handleDeleteComments","postComment","getAllUsers","UserSelect","getSelectUser","users","setUsers","loadAllUsersData","gotUsers","user","Fragment","App","setSelectedUserId","setSelectPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c78515e.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number): Promise<any> => {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  return response.json();\n};\n\nexport const getAllPosts = async (): Promise<any> => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number): Promise<Post> => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\nimport { getAllPosts, getUserPosts } from '../../api/posts';\n\ninterface Props {\n  selectedUserId: number,\n  getSelectPostId: (postId: number) => void,\n  selectPostId: number,\n}\nexport const PostsList: React.FC<Props> = (\n  {\n    selectedUserId,\n    getSelectPostId,\n    selectPostId,\n  },\n) => {\n  const [posts, setPosts] = useState<Post[] | null>(null);\n\n  const loadPostsDataByID = async (userId: number) => {\n    const gotPosts = await getUserPosts(userId);\n\n    setPosts(gotPosts);\n  };\n\n  const loadAllPostsData = async () => {\n    const gotAllPosts = await getAllPosts();\n\n    setPosts(gotAllPosts);\n  };\n\n  useEffect(() => {\n    if (selectedUserId) {\n      loadPostsDataByID(selectedUserId);\n    } else {\n      loadAllPostsData();\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts && (posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>{`User #${post.userId}: ${post.title}`}</b>\n\n            </div>\n            { selectPostId === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  getSelectPostId(0);\n                }}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  getSelectPostId(post.id);\n                }}\n              >\n                Open\n              </button>\n            )}\n\n          </li>\n        )))}\n      </ul>\n\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number): Promise<any> => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n};\n\nexport const deletePostComments = async (commentId: number): Promise<any> => {\n  const response = await fetch(\n    `${BASE_URL}/comments/${commentId}`,\n    { method: 'DELETE' },\n  );\n\n  return response.json();\n};\n\nexport const addComment = async (\n  newComment: NewComment,\n): Promise<any> => {\n  const response = await fetch(\n    `${BASE_URL}/comments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n      },\n      body: JSON.stringify(newComment),\n    },\n  );\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport { addComment } from '../../api/coments';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  selectPostId: number,\n  refreshCommentsData: () => void,\n}\nexport const NewCommentForm: React.FC<Props> = ({\n  selectPostId,\n  refreshCommentsData,\n}) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = {\n      postId: selectPostId,\n      name,\n      email,\n      body,\n    };\n\n    await addComment(newComment);\n\n    refreshCommentsData();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostComments, deletePostComments } from '../../api/coments';\nimport { getPostDetails } from '../../api/posts';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectPostId: number,\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectPostId }) => {\n  const [commentsOfPost, setCommentsOfPost] = useState<Comment[]>([]);\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [visibleComments, setVisibleComments] = useState<boolean>(true);\n\n  const loadComentsByPostId = async (postId: number) => {\n    const gotComments = await getPostComments(postId);\n\n    setCommentsOfPost(gotComments);\n  };\n\n  const loadPostDetails = async (postId: number) => {\n    const gotPostDetails = await getPostDetails(postId);\n\n    setPostDetails(gotPostDetails);\n  };\n\n  const refreshCommentsData = async () => {\n    const freshComents = await getPostComments(selectPostId);\n\n    setCommentsOfPost(freshComents);\n  };\n\n  const handleDeleteComments = async (commentId: number) => {\n    await deletePostComments(commentId);\n    refreshCommentsData();\n  };\n\n  useEffect(() => {\n    loadComentsByPostId(selectPostId);\n    loadPostDetails(selectPostId);\n  }, [selectPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n\n        <p>{postDetails?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n\n        {visibleComments ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              setVisibleComments(false);\n            }}\n          >\n            Hide comments\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              setVisibleComments(true);\n            }}\n          >\n            Show comments\n          </button>\n        )}\n\n        {visibleComments && commentsOfPost?.map(postComment => (\n          <ul\n            key={postComment.id}\n            className=\"PostDetails__list\"\n          >\n            <li className=\"PostDetails__list-item\">\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => {\n                  handleDeleteComments(postComment.id);\n                }}\n              >\n                X\n              </button>\n              <p>{postComment.body}</p>\n            </li>\n          </ul>\n\n        ))}\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectPostId={selectPostId}\n            refreshCommentsData={refreshCommentsData}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getAllUsers = async (): Promise<any> => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport { getAllUsers } from '../../api/users';\n\ninterface Props {\n  getSelectUser: (userId: number) => void,\n  selectedUserId: number,\n}\nexport const UserSelect: React.FC<Props> = (\n  {\n    selectedUserId,\n    getSelectUser,\n  },\n) => {\n  const [users, setUsers] = useState<User[] | null>(null);\n\n  const loadAllUsersData = async () => {\n    const gotUsers = await getAllUsers();\n\n    setUsers(gotUsers);\n  };\n\n  useEffect(() => {\n    loadAllUsersData();\n  }, []);\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    getSelectUser(+event.target.value);\n  };\n\n  return (\n    <label>\n      Select a user: &nbsp;\n      <select\n        className=\"App__user-selector\"\n        name=\"selectedUserId\"\n        value={selectedUserId}\n        onChange={handleUserChange}\n      >\n        <option value={0}>All users</option>\n        {users && (users.map(user => (\n          <React.Fragment\n            key={user.id}\n          >\n            <option value={user.id}>\n              {user.name}\n            </option>\n\n          </React.Fragment>\n        )))}\n\n      </select>\n    </label>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [selectPostId, setSelectPostId] = useState<number>(0);\n\n  const getSelectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  const getSelectPostId = (postId: number) => {\n    setSelectPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          getSelectUser={getSelectUser}\n          selectedUserId={selectedUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            getSelectPostId={getSelectPostId}\n            selectPostId={selectPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectPostId && (\n            <PostDetails\n              selectPostId={selectPostId}\n            />\n          )}\n\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}